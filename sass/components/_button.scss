.btn {
  /**
    The link here is a pseudo class 
    https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes

    link - How the link should appear
    visited - How the link should appear after the user has clicked on it. By default, the browsers will change the color of the link to indicate the user has visited this before. In this application, we want the link to look exactly the same even after it has been visited
    &, means also apply these styles to a regular button
  */
  &,
  &:link,
  &:visited {
    text-transform: uppercase;
    text-decoration: none;
    /**
      Just 2 numbers will mean top and bottom will be same, left right will be same
    */
    padding: 1.5rem 4rem;
    /**
      inline-block prevents the btn from overlapping on the previous element
    */
    display: inline-block;
    border-radius: 10rem;
    /**
      All the transformations will now take 0.2s to complete. Without this, all the animations will look jittery 
    */
    transition: all 0.2s;
    /**
      In this case, the after pseudo class will use this to align itself. 
    */
    position: relative;
    font-size: $default-font-size;

    // By Default, buttons come with a border. We want to remove this.
    border: none;
    cursor: pointer;
  }
  &--white {
    background-color: $color-white;
    color: $color-grey-dark-1;
    &::after {
      background-color: $color-white;
    }
  }
  &--green {
    background-color: $color-primary;
    color: $color-white;
    &::after {
      background-color: $color-primary;
    }
  }
  &:hover {
    outline: none;
    transform: translateY(-5px);
    /**
      0 - Just in the epsilon or y axis
      10px - The shadow will be 10 px down
      20px - The blur we will see
    */
    box-shadow: 0 1rem 2rem rgba($color-black, 0.2);
    &::after {
      outline: none;
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0;
    }
  }
  /** 
    Active is for when you click on the element 
  */
  &:active {
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba($color-black, 0.2);
  }
  &::after {
    /**
      For the after pseudo element to appear, we need to specify the content. Doesn't matter even if it is empty. We need to specify it
    */
    outline: none;
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all 0.5s;
  }
  &--animated {
    animation: moveInBottom 0.5s ease-out 0.75s;
    /**
      backwards - This will ensure that all the other CSS is applied before starting the animation,i.e, apply all the styles at 0% and then display the element by playing the animation with the  
    */
    animation-fill-mode: backwards;
  }
}

.btn-text {
  padding: 1rem;
  padding-bottom: 1rem;
  transition: all 0.2s;
  &:link,
  &:visited {
    color: $color-primary;
    display: inline-block;
    text-decoration: none;
    border-bottom: 0.1rem solid $color-primary;
    font-size: $default-font-size;
  }

  &:hover {
    padding-bottom: 1rem;
    background-color: $color-primary;
    color: $color-white;
    box-shadow: 0 1rem 2rem rgba($color-black, 0.15);
    transform: translateY(-2px);
  }
  &:active {
    box-shadow: 0 0.5rem 1rem rgba($color-black, 0.15);
    transform: translateY(0px);
  }
}
