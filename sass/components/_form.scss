.form {
  &__group:not(:last-child) {
    margin-bottom: 2rem;
  }
  &__input {
    font-size: 1.5rem;
    /**
        The input elements are different. They do not inherit the font properties by default. Therefore, we need to explicitly specify it
    */
    font-family: inherit;
    color: inherit;

    padding: 1.5rem 2rem;
    border-radius: calc(0.3 * #{$default-border-radius});
    background-color: rgba($color: $color-white, $alpha: 0.5);
    border: none;
    /**
        This is to ensure that the element will not push other elements down when effects such as shadow is applied
    */
    border-bottom: 0.3rem solid transparent;
    transition: all 0.3s;
    width: 100%;
    display: block;

    &:focus {
      outline: none;
      box-shadow: 0rem 1rem 2rem rgba($color: $color-black, $alpha: 0.1);
      border-bottom: 0.3rem solid $color-primary;
      transform: scale(1.03);
      border-right: 10rem;

      /**
        When the form data is invalid, apply these styles
      */
      &:invalid {
        border-bottom: 0.3rem solid $color-secondary-dark;
      }
    }

    /**
        This will style the placeholder text
    */
    &::-webkit-input-placeholder {
      color: $color-grey-dark-2;
    }
  }

  &__label {
    font-size: 1.2rem;
    font-weight: 700;
    margin-left: 1.5rem;
    margin-top: 0.7rem;
    display: block;
    transition: all 0.3s;
  }

  /**
    + => This is known as the adjacent sibling selector. This will select the direct sibling
    ~ => This will known as the general sibling selector. Say its not a directly siblings, and that there are other levels in between. In this scenario, it makes a lot more sense to use this general selector

    These concepts only apply because the code for label in index.html comes after the code for input. If it was written the other way around, then it will not work

    Note: These styles will only apply when the placeholder is visible
  */
  &__input:placeholder-shown + &__label {
    opacity: 0;
    visibility: hidden;
    transform: translateY(-4.35rem);
  }

  &__radio {
    &-group {
      /**
        Trial and error. We saw at 49% the buttons actually appear side by side
      */
      width: 49%;
      /**
        They will be blocks, but within the same line
      */
      display: inline-block;
    }
    &-label {
      font-size: $default-font-size;
      cursor: pointer;
      /**
        label is the parent for the button
      */
      position: relative;
      padding-left: 4.5rem;
    }
    /**
      This is how to create a custom radio button
    */
    &-button {
      height: 3rem;
      width: 3rem;
      border: 5px solid $color-primary;
      border-radius: 50%;
      display: inline-block;
      /**
        For position absolute to work, we need specify the parent position. Whether it is relative or absolute
      */
      position: absolute;
      left: 0;
      top: -0.5rem;
      &::after {
        /**
          Each time we use a pseudo element, we need to specify the content property
        */
        content: "";
        // display: block;
        height: 1.3rem;
        width: 1.3rem;
        border-radius: 50%;
        position: absolute;
        padding: auto;
        // margin: auto;
        top: 50%;
        left: 50%;
        /**
          This is to make it center
        */
        transform: translate(-50%, -50%);
        background-color: $color-primary;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.2s;
      }
    }

    /**
      We need to select radio-button. This is a child of the radio-label. Therefore, we first select radio-label using + and then we select radio-button
    */
    &-input:checked + &-label &-button::after {
      opacity: 1;
      visibility: visible;
    }

    &-input {
      // visibility: hidden;
      display: none;
    }
  }
}
