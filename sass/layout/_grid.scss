/**
    This will define all the grid like structures that will be used in the project
*/

.row {
  max-width: $grid-width;
  @include respond(tab-port) {
    max-width: 50rem;
    padding: 0 3rem;
  }
  @include respond(tab-land) {
    padding: 0 3rem;
  }

  /**
        We are saying that the margin on top and bottom is 0. The margins left and right is auto
        What this means is that CSS will automatically try to center the element
    */
  margin: 0 auto;
  /**
        We just want to make sure that there is no margin on the last row
    */
  &:not(:last-child) {
    margin-bottom: $gutter-vertical;
    @include respond(tab-port) {
      margin-bottom: $gutter-vertical-small;
    }
  }
  @include clearfix;
  /**
        Select based on partial class names.
        Here we are selecting all the classes that will start off with col-

        ^= Any class that starts with the specified name
        *= Any class that contains the specified name
        $= Any class that ends with the specified name
    */
  [class^="col-"] {
    float: left;
    &:not(:last-child) {
      margin-right: $gutter-horizontal;
      @include respond(tab-port) {
        margin-right: 0;
        margin-bottom: $gutter-vertical-small;
      }
    }
    /**
      When optimizing for mobile, generally, all the columns are transformed
      into rows
    */

    @include respond(tab-port) {
      width: 100% !important;
    }
  }
  .col-1-of-2 {
    width: calc((100% - #{$gutter-horizontal}) / 2);
  }
  .col-1-of-3 {
    width: calc((100% - (2 *#{$gutter-horizontal})) / 3);
  }
  .col-2-of-3 {
    width: calc(
      2 * ((100% - (2 *#{$gutter-horizontal})) / 3) + #{$gutter-horizontal}
    );
  }
  .col-1-of-4 {
    width: calc((100% - (3 *#{$gutter-horizontal})) / 4);
  }
  .col-2-of-4 {
    width: calc(
      2 * ((100% - (3 *#{$gutter-horizontal})) / 4) + #{$gutter-horizontal}
    );
  }
  .col-3-of-4 {
    width: calc(
      3 * ((100% - (3 *#{$gutter-horizontal})) / 4) + (2 *#{$gutter-horizontal})
    );
  }
}
