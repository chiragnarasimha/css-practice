/**

  COLORS:
  Light green: #7ed56f
  Primary green: #55c57a
  Dark green: #28b485

  Note: It is actually better to use rem as the unit of choice. This is because if the font size of the page changes, then all the other elements will scale nicely with this. This way, if the user zooms into the page, the elements will still maintain similar aspect ratios

  Generally, it is not advised to use em's. This is because, it will take a lot of calculations to get  the units right. ems will depend on the size of the parent element

  Note: This SCSS file has been derived from ../css/style.css. ../css/style.css was converted into this SCSS file

  Note: This project is also using the 7-1 architecture pattern, where we have one main SASS file to import all the other SASS files. The two folders that are notably missing in this project are themes and vendors. For now, we will not have custom themes. We are also not using any third party vendors css. So these folders have not been created. The end goal is to have no code in the main file. All this will do is import other css files

  Note: SCSS and SASS extensions both use the same preprocessor. The main difference is that the syntax in SCSS is easier to read. SCSS with brackets, where as SASS files are more like python
*/
/**
  Note: We are not using base/_base.scss
  SASS is smart enough to understand without us having to explicitly specify these values
*/
/**
    When we use the float layout, it will force the elements to have 0 height. This is not a desirable behavior. This is because it will also not take into consideration the specified margins.

    clearfix will attempt to fix this issue. https://www.w3schools.com/howto/howto_css_clearfix.asp

    TLDR -> Clear fix will append a pseudo element. This pseudo element will then clear the floats. This workaround will then respect the margins specified
*/
/**
  Having these mixins to declare the media queries is a good practice.
  This is because, in the future, if we want to change any of the 
  pixels, then we can just change that here in the mixins.

  As of 20 Jun 2022, these break points make the most sense for the devices
  currently in the market
  |-------------------|-------------------------|
  | Pixel Range       | Device                  |
  |-------------------|-------------------------|
  | 0px - 600px       | Phone                   |
  | 600px - 900px     | Tablet Portrait Mode    |
  | 900px - 1200px    | Tablet Landscape Mode   |   
  | 1200px - 1800px   | Normal Styles Apply     |
  | 1800px+           | Tablet Portrait Mode    |
  |-------------------|-------------------------|
  
  The media query manager below is using ems instead of rems, or px.
  This is purely from experience. It is found that for media queries, it is 
  better to use ems instead of rems
  If the user changes the browser font size, then ems tend to respond better.
  For media queries in particular, rems do not work as expected. ems tend to 
  work better

  1em = 16px (16 px is the default font-size in most browsers

*/
/**
  114 rem is like a standard width used for a row
  We use the max-width as this makes it easier to organize elements. Using the max-width will mean that we do not need to worry to much about how things will look on higher resolution displays
*/
/**
  This is the space between the rows
*/
/**
  This is the space in between the columns
*/
/**
  This is how to add animations
  For the performance sakes, it is best to animate just one or two things
*/
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  50% {
    opacity: 0.5; }
  80% {
    opacity: 0.5;
    transform: translateX(2rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  50% {
    opacity: 0.5; }
  80% {
    transform: translateX(-2rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  50% {
    opacity: 0.5; }
  100% {
    opacity: 1;
    transform: translateY(0); } }

/**
  Note: This is a partial file. This is why it is following the _ naming convention at the start of the file
*/
/**
  This is how to declare a universal selector 
  We also want to make sure that the after and before pseudo elements also have the same behaviors 
*/
*,
*::after,
*::before {
  /**
    By default, the browser will add some padding and margins to the page. The code below will prevent that from happening 
  */
  margin: 0;
  padding: 0;
  /**
    We are telling if nothing is defined, by default all the elements should inherit the properties for the box sizing 
  */
  box-sizing: inherit; }

/**
  This is how we can modify the root properties. These are the new values that will be used when using rem as the unit 
*/
html {
  /**
    Setting the root font-size to 10, just to make it easier for future calculations 
  */
  /**
    By default, most of the browsers will use a font size of 16. To convert 16 to 10, 10/16 * 100 = 62.5%  
  */
  /**
    Note: Since we are changing the root font-size here, we could make the argument that this bit should be moved into typography. However, we are actually changing the overall setting. It makes more sense to keep this here for now. This setting is defining what 1REM is. 
  */
  font-size: 62.5%; }
  @media (min-width: 112.5em) {
    html {
      font-size: 75%; } }
  @media (max-width: 75em) {
    html {
      font-size: 56.25%; } }
  @media (max-width: 56.25em) {
    html {
      font-size: 50%; } }

/**
 In this page, everything is container within the body. This is the style that will be applied by default. 
*/
body {
  box-sizing: border-box;
  padding: 4rem; }
  @media (max-width: 75em) {
    body {
      padding: 0rem; } }

.heading-primary {
  /**
    heading-primary can again be considered component or a typography. It makes more sense to put it in typography as this bit of code is dealing with how the text is displayed. 
  */
  color: #fff;
  text-transform: uppercase;
  /**
    Sometimes when the animations play, it can be a bit shaky. Setting this property fixes it 
  */
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    /**
      Displays an element as a block element (like <p>). It starts on a new line, and takes up the whole width 
    */
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation: moveInLeft 1s ease-out; }
    @media (max-width: 37.5em) {
      .heading-primary--main {
        /**
        @content - This is how we can pass a block of code into the mixin
      */
        font-size: 5rem;
        letter-spacing: 1rem; } }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out; }
    @media (max-width: 37.5em) {
      .heading-primary--sub {
        /**
        @content - This is how we can pass a block of code into the mixin
      */
        letter-spacing: 0.5rem; } }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16;
  line-height: 1.7;
  color: #777; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  /**
    Without displaying as the inline block, then text styling will span across the entire width of the page
  */
  display: inline-block;
  /**
    Applying the nice gradient color to the text
  */
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  /**
    This will make it so that the background (which is the linear gradient) is applied only to the back of the text.

    Combine this effect and color: transparent to add the nice gradient to the Text
  */
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: 0.2rem;
  /**
    Adding some animations so to make the text cooler when we hover
  */
  transition: all 0.2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }
  @media (max-width: 56.25em) {
    .heading-secondary {
      font-size: 3rem; } }
  @media (max-width: 37.5em) {
    .heading-secondary {
      /**
        @content - This is how we can pass a block of code into the mixin
      */
      font-size: 2.5rem; } }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem;
  /**
    As the name suggests, we want to apply this style to everything except the last paragraph
  */ }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

/**
  !important keyword is used here because when we use a utility class, we want it to overwrite any other styles
*/
.u-center-text {
  text-align: center !important; }

.u-margin-bottom-big {
  margin-bottom: 8rem !important; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem !important; }

.u-margin-bottom-medium {
  margin-bottom: 4rem !important; }

.u-margin-top-big {
  margin-top: 8rem !important; }

.btn {
  /**
    The link here is a pseudo class 
    https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes

    link - How the link should appear
    visited - How the link should appear after the user has clicked on it. By default, the browsers will change the color of the link to indicate the user has visited this before. In this application, we want the link to look exactly the same even after it has been visited
    &, means also apply these styles to a regular button
  */
  /** 
    Active is for when you click on the element 
  */ }
  .btn, .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    /**
      Just 2 numbers will mean top and bottom will be same, left right will be same
    */
    padding: 1.5rem 4rem;
    /**
      inline-block prevents the btn from overlapping on the previous element
    */
    display: inline-block;
    border-radius: 10rem;
    /**
      All the transformations will now take 0.2s to complete. Without this, all the animations will look jittery 
    */
    transition: all 0.2s;
    /**
      In this case, the after pseudo class will use this to align itself. 
    */
    position: relative;
    font-size: 1.6rem;
    border: none;
    cursor: pointer; }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn--green {
    background-color: #55c57a;
    color: #fff; }
    .btn--green::after {
      background-color: #55c57a; }
  .btn:hover {
    outline: none;
    transform: translateY(-5px);
    /**
      0 - Just in the epsilon or y axis
      10px - The shadow will be 10 px down
      20px - The blur we will see
    */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
    .btn:hover::after {
      outline: none;
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:active {
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn::after {
    /**
      For the after pseudo element to appear, we need to specify the content. Doesn't matter even if it is empty. We need to specify it
    */
    outline: none;
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all 0.5s; }
  .btn--animated {
    animation: moveInBottom 0.5s ease-out 0.75s;
    /**
      backwards - This will ensure that all the other CSS is applied before starting the animation,i.e, apply all the styles at 0% and then display the element by playing the animation with the  
    */
    animation-fill-mode: backwards; }

.btn-text {
  padding: 1rem;
  padding-bottom: 1rem;
  transition: all 0.2s; }
  .btn-text:link, .btn-text:visited {
    color: #55c57a;
    display: inline-block;
    text-decoration: none;
    border-bottom: 0.1rem solid #55c57a;
    font-size: 1.6rem; }
  .btn-text:hover {
    padding-bottom: 1rem;
    background-color: #55c57a;
    color: #fff;
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
    transform: translateY(-2px); }
  .btn-text:active {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    transform: translateY(0px); }

/**
    This file will contain the styling for the photos used in the EXCITING TOURS FOR ADVENTUROUS PEOPLE section
*/
.composition {
  position: relative;
  /**
      When we hover on composition and then on a composition photo, select all the children that are not directly under the mouse
  */ }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 1.6rem;
    /**
        As soon as we set the position to absolute on an element, these elements wll be placed according to a reference and the reference is the first parent that it encounters
    */
    position: absolute;
    transition: all 0.2s; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      transform: scale(1.05) translateY(-0.5rem);
      box-shadow: 0 2.5 6rem rgba(0, 0, 0, 0.6);
      z-index: 10;
      /**
          Adding the frame to the image
      */
      outline: 1.5rem solid #55c57a;
      outline-offset: 2rem; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.9); }

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 1.6rem;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  transition: all 0.5s;
  height: 40rem; }
  @media (max-width: 56.25em) {
    .feature-box {
      height: max-content; } }
  .feature-box__icon {
    font-size: 6rem;
    margin-bottom: 0.5rem;
    display: inline-block;
    background-image: linear-gradient(to right, #7ed56f, #28b485);
    -webkit-background-clip: text;
    color: transparent;
    letter-spacing: 0.2rem; }
  .feature-box:hover {
    transform: translateY(-3rem); }

.card {
  /**
      This will make it so that the card feels like it is turning physically
  */
  perspective: 150rem;
  -moz-perspective: 150rem;
  position: relative;
  height: 52rem; }
  .card__side {
    background-color: orangered;
    height: 52rem;
    transition: all 0.8s ease;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    border-radius: 1.6rem;
    /**
        When we added the image, there was a problem. The image was no longer respecting the border-radius set on the page. 

        overflow:hidden will fix this issue.
    */
    overflow: hidden;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
    /**
        This is required to make the animation appear smoother
    */
    backface-visibility: hidden; }
    .card__side--front {
      background-color: #fff; }
    .card__side--back {
      /**
        Even before hovering, the backside is already flidded
        */
      transform: rotateY(180deg); }
      .card__side--back-1 {
        background-image: linear-gradient(to right bottom, #ffb900, #ff7730); }
      .card__side--back-2 {
        background-image: linear-gradient(to right bottom, #7ed56f, #28b485); }
      .card__side--back-3 {
        background-image: linear-gradient(to right bottom, #2998ff, #5643fa); }
  .card:hover .card__side--front {
    transform: rotateY(-180deg); }
  .card:hover .card__side--back {
    transform: rotateY(0deg); }
  .card__picture {
    background-size: cover;
    height: 23rem;
    /**
        This will blend two images together
    */
    background-blend-mode: screen;
    /**
        Add the diagonal effect to the bottom of the image
        -webkit-clip-path: This is to make it work in all sites
    */
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    border-top-left-radius: 1.6rem;
    border-top-right-radius: 1.6rem; }
    .card__picture--1 {
      background-image: url(../img/nat-5.jpg), linear-gradient(to right bottom, #ffb900, #ff7730); }
    .card__picture--2 {
      background-image: url(../img/nat-6.jpg), linear-gradient(to right bottom, #7ed56f, #28b485); }
    .card__picture--3 {
      background-image: url(../img/nat-7.jpg), linear-gradient(to right bottom, #2998ff, #5643fa); }
  .card__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    color: #fff;
    position: absolute;
    top: 12rem;
    right: 2rem;
    text-align: right;
    width: 75%; }
  .card__heading-span {
    padding: 1rem 1.5rem;
    /**
        This will apply all the declarations that we have in teh selector to all the boxes created by the element
    */
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone; }
    .card__heading-span--1 {
      background-image: linear-gradient(to right bottom, rgba(255, 185, 0, 0.85), rgba(255, 119, 48, 0.85)); }
    .card__heading-span--2 {
      background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.85), rgba(40, 180, 133, 0.85)); }
    .card__heading-span--3 {
      background-image: linear-gradient(to right bottom, rgba(41, 152, 255, 0.85), rgba(86, 67, 250, 0.85)); }
  .card__details {
    padding: 3rem; }
    .card__details ul {
      list-style: none;
      width: 80%;
      margin: 0 auto; }
      .card__details ul li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem; }
        .card__details ul li:not(:last-child) {
          border-bottom: 1px solid #eee; }
  .card__cta {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    text-align: center; }
  .card__price-box {
    text-align: center;
    color: #fff;
    margin-bottom: 8rem; }
  .card__price-only {
    font-size: 1.4rem; }
  .card__price-value {
    font-size: 6rem;
    font-weight: 100; }

.story {
  width: 75%;
  /**
      Since we are dealing with a block element inside of a block element, we can use margin: 0 auto to center it 
  */
  margin: 0 auto;
  box-shadow: 0 3rem 6rem rgba(0, 0, 0, 0.1);
  background-color: rgba(255, 255, 255, 0.6);
  border-radius: 1px;
  padding: 6rem;
  padding-left: 9rem;
  transition: all 0.3s;
  font-size: 1.6rem;
  transform: skewX(-12deg); }
  .story > * {
    transform: skewX(12deg); }
  .story__shape {
    width: 15rem;
    height: 15rem;
    float: left;
    -webkit-shape-outside: circle(50% at 50% 50%);
    shape-outside: circle(50% at 50% 50%);
    -webkit-clip-path: circle(50% at 50% 50%);
    clip-path: circle(50% at 50% 50%);
    transform: translateX(-3rem) skewX(12deg);
    position: relative; }
  .story__img {
    height: 100%;
    transform: translateX(-4rem) scale(1.4);
    backface-visibility: hidden;
    transition: all 0.5s; }
  .story__caption {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, 20%);
    color: #fff;
    font-size: 1.7rem;
    text-align: center;
    opacity: 0;
    transition: all 0.5s;
    backface-visibility: hidden; }
  .story:hover .story__caption {
    opacity: 1;
    transform: translate(-50%, -50%); }
  .story:hover .story__img {
    transform: translateX(-4rem) scale(1);
    filter: blur(0.3rem) brightness(80%); }

.bg-video {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  z-index: -1;
  opacity: 0.15; }
  .bg-video__content {
    height: 100%;
    width: 100%;
    -webkit-object-fit: cover;
    object-fit: cover; }

.book {
  /**
    Here we are using two images.
    1st one is a linear gradient.
      The linear gradient has an angle of 105deg
      It has to be white till 50%
      It will then make a sharp transition to black at 50%
    2nd one is the picture that will be placed underneath it
  */
  background-image: linear-gradient(105deg, rgba(255, 255, 255, 0.9) 50%, rgba(0, 0, 0, 0.3) 50%), url(../img/nat-10.jpg);
  background-size: cover;
  border-radius: 1.6rem;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.3);
  transition: all 0.3s; }
  .book__form {
    width: 50%;
    padding: 6rem; }

.form {
  /**
    + => This is known as the adjacent sibling selector. This will select the direct sibling
    ~ => This will known as the general sibling selector. Say its not a directly siblings, and that there are other levels in between. In this scenario, it makes a lot more sense to use this general selector

    These concepts only apply because the code for label in index.html comes after the code for input. If it was written the other way around, then it will not work

    Note: These styles will only apply when the placeholder is visible
  */ }
  .form__group:not(:last-child) {
    margin-bottom: 2rem; }
  .form__input {
    font-size: 1.5rem;
    /**
        The input elements are different. They do not inherit the font properties by default. Therefore, we need to explicitly specify it
    */
    font-family: inherit;
    color: inherit;
    padding: 1.5rem 2rem;
    border-radius: calc(0.3 * 1.6rem);
    background-color: rgba(255, 255, 255, 0.5);
    border: none;
    /**
        This is to ensure that the element will not push other elements down when effects such as shadow is applied
    */
    border-bottom: 0.3rem solid transparent;
    transition: all 0.3s;
    width: 100%;
    display: block;
    /**
        This will style the placeholder text
    */ }
    .form__input:focus {
      outline: none;
      box-shadow: 0rem 1rem 2rem rgba(0, 0, 0, 0.1);
      border-bottom: 0.3rem solid #55c57a;
      transform: scale(1.03);
      border-right: 10rem;
      /**
        When the form data is invalid, apply these styles
      */ }
      .form__input:focus:invalid {
        border-bottom: 0.3rem solid #ff7730; }
    .form__input::-webkit-input-placeholder {
      color: #999; }
  .form__label {
    font-size: 1.2rem;
    font-weight: 700;
    margin-left: 1.5rem;
    margin-top: 0.7rem;
    display: block;
    transition: all 0.3s; }
  .form__input:placeholder-shown + .form__label {
    opacity: 0;
    visibility: hidden;
    transform: translateY(-4.35rem); }
  .form__radio {
    /**
      This is how to create a custom radio button
    */
    /**
      We need to select radio-button. This is a child of the radio-label. Therefore, we first select radio-label using + and then we select radio-button
    */ }
    .form__radio-group {
      /**
        Trial and error. We saw at 49% the buttons actually appear side by side
      */
      width: 49%;
      /**
        They will be blocks, but within the same line
      */
      display: inline-block; }
    .form__radio-label {
      font-size: 1.6rem;
      cursor: pointer;
      /**
        label is the parent for the button
      */
      position: relative;
      padding-left: 4.5rem; }
    .form__radio-button {
      height: 3rem;
      width: 3rem;
      border: 5px solid #55c57a;
      border-radius: 50%;
      display: inline-block;
      /**
        For position absolute to work, we need specify the parent position. Whether it is relative or absolute
      */
      position: absolute;
      left: 0;
      top: -0.5rem; }
      .form__radio-button::after {
        /**
          Each time we use a pseudo element, we need to specify the content property
        */
        content: "";
        height: 1.3rem;
        width: 1.3rem;
        border-radius: 50%;
        position: absolute;
        padding: auto;
        top: 50%;
        left: 50%;
        /**
          This is to make it center
        */
        transform: translate(-50%, -50%);
        background-color: #55c57a;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.2s; }
    .form__radio-input:checked + .form__radio-label .form__radio-button::after {
      opacity: 1;
      visibility: visible; }
    .form__radio-input {
      display: none; }

.popup {
  height: 100vh;
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
  background-color: rgba(0, 0, 0, 0.8);
  z-index: 9999;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s;
  /**
    This will ensure that when the URL changes, this popup will 
    open up in its place
  */ }
  .popup__content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 75%;
    background-color: #fff;
    border-radius: 1.6rem;
    box-shadow: 0 2rem 4rem rgba(0, 0, 0, 0.1);
    /**
        Table is a better alternative to use here. This is because of
        both the cells will have the same height 
    */
    display: table;
    /**
    The alternative to using the overflow hidden is this. This is 
    not a great way of doing it.
        &:first-child {
             border-top-left-radius: $default-border-radius;
        }
        &:last-child {
            border-bottom-left-radius: $default-border-radius;
        }
    */
    overflow: hidden;
    opacity: 0;
    transform: translate(-50%, -50%) scale(0);
    transition: all 0.4s; }
  .popup__left {
    width: calc(100% / 3);
    /**
        Although it is possible to use floats to position these images, 
        it is not advisable. This is because of the fact that floats 
        tend to occupy the space that its content actually needs. THis 
        will mean that it will make it difficult to position the 
        children elements
    */
    display: table-cell;
    vertical-align: middle;
    border-radius: 1.6rem; }
  .popup__right {
    width: calc(100% / 3 * 2);
    display: table-cell;
    vertical-align: middle;
    padding: 3rem 5rem; }
  .popup__img {
    display: block;
    width: 100%; }
  .popup__text {
    font-size: 1.4rem;
    margin-bottom: 4rem;
    -moz-column-count: 2;
    -moz-column-count: 2;
    -moz-column-gap: 4rem;
    -webkit-column-gap: 4rem;
    -webkit-column-rule: 1px solid #eee;
    -webkit-column-rule: 1px solid #eee;
    column-count: 2;
    column-gap: 4rem;
    column-rule: 1px solid #eee;
    -moz-hyphens: auto;
    -ms-hyphens: auto;
    -webkit-hyphens: auto;
    hyphens: auto; }
  .popup__close:link, .popup__close:visited {
    color: #777;
    position: absolute;
    top: 0.5rem;
    right: 2.5rem;
    font-size: 3rem;
    text-decoration: none;
    display: inline-block;
    transition: all 0.2s; }
  .popup__close:hover {
    color: #ff7730; }
  .popup:target {
    opacity: 1;
    visibility: visible; }
  .popup:target .popup__content {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1); }

/**
    This will define all the grid like structures that will be used in the project
*/
.row {
  max-width: 114rem;
  /**
        We are saying that the margin on top and bottom is 0. The margins left and right is auto
        What this means is that CSS will automatically try to center the element
    */
  margin: 0 auto;
  /**
        We just want to make sure that there is no margin on the last row
    */
  /**
        Select based on partial class names.
        Here we are selecting all the classes that will start off with col-

        ^= Any class that starts with the specified name
        *= Any class that contains the specified name
        $= Any class that ends with the specified name
    */ }
  @media (max-width: 56.25em) {
    .row {
      max-width: 50rem;
      padding: 0 3rem; } }
  @media (max-width: 75em) {
    .row {
      padding: 0 3rem; } }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
    @media (max-width: 56.25em) {
      .row:not(:last-child) {
        margin-bottom: 6rem; } }
  .row::after {
    /**
        It is important to specify some content. Even if its empty. if not, the element will not be displayed on the screen.
    */
    content: "";
    /**
        display: table; is just a standard version of the clearfix. This is what everyone uses generally speaking
    */
    display: table;
    /**
        This is the actual code that will clear the floats thats been applied to the elements
    */
    clear: both; }
  .row [class^="col-"] {
    float: left;
    /**
      When optimizing for mobile, generally, all the columns are transformed
      into rows
    */ }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
      @media (max-width: 56.25em) {
        .row [class^="col-"]:not(:last-child) {
          margin-right: 0;
          margin-bottom: 6rem; } }
    @media (max-width: 56.25em) {
      .row [class^="col-"] {
        width: 100% !important; } }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - (2 *6rem)) / 3); }
  .row .col-2-of-3 {
    width: calc( 2 * ((100% - (2 *6rem)) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - (3 *6rem)) / 4); }
  .row .col-2-of-4 {
    width: calc( 2 * ((100% - (3 *6rem)) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc( 3 * ((100% - (3 *6rem)) / 4) + (2 *6rem)); }

/**
 . is used to select the custom classes 
*/
.header {
  /**
    Header can be considered a component or a layout. It can be considered layout because every page will contain a header. So in other words, the layout of every page will contain a header. 
    vh - view port height. This will make it so that the height of the header will always be 95% of the viewport height 
  */
  height: 95vh;
  /**
    using the comma separator, we can add multiple images. The first one will be the top most image 
  */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /**
    cover will try and fit the element into the viewport 
  */
  background-size: cover;
  /**
    This will fix the top of the image in place, the rest of the image will crop to fit the viewport 
  */
  background-position: top;
  /**
    This will allow the header to be clipped based on the specified shape. Inside the polygon function, specify the area of the image that should still be visible 
    corresponding corners: polygon( TL, TR, BR, BL) 
  */
  -webkit-clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /**
    The child elements will now use this parameter to align them selves 
  */
  position: relative;
  /**
    The & symbol will get translated to .header
    For example &__logo-box is same as .header__logo-box
  */ }
  @media (max-width: 37.5em) {
    .header {
      /**
        @content - This is how we can pass a block of code into the mixin
      */
      clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%); } }
  .header__logo-box {
    position: absolute;
    /**
      Will be positioned 40px from top and left based on the parent element of header. This is because the header has a position attribute set to relative 
    */
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    /**
      The percentages below are for aligning the text to the middle of the screen 
    */
    top: 40%;
    left: 50%;
    /**
      This will move the origin to the center of the element rather than default of top edge and the left edge 
    */
    transform: translate(-50%, -50%);
    text-align: center; }

.footer {
  background-color: #333;
  padding: 10rem 0;
  font-size: 1.4rem;
  color: #eee; }
  @media (max-width: 56.25em) {
    .footer {
      padding: 8rem 0; } }
  .footer__logo {
    width: 15rem;
    height: auto; }
    .footer__logo-box {
      text-align: center;
      margin-bottom: 8rem; }
      @media (max-width: 56.25em) {
        .footer__logo-box {
          margin-bottom: 6rem; } }
  .footer__navigation {
    border-top: 1px solid #eee;
    padding-top: 2rem;
    /**
        inline block will not occupy 100% of the width. It will occupy the width that the content will need
    */
    display: inline-block; }
    @media (max-width: 56.25em) {
      .footer__navigation {
        width: 100%;
        text-align: center; } }
  .footer__list {
    list-style: none; }
  .footer__item {
    display: inline-block; }
    .footer__item:not(:last-child) {
      margin-right: 1.5rem; }
      @media (max-width: 56.25em) {
        .footer__item:not(:last-child) {
          margin-right: 0; } }
  .footer__link:link, .footer__link:visited {
    color: #eee;
    background-color: #333;
    text-decoration: none;
    text-transform: uppercase;
    display: inline-block;
    transition: all 0.2s;
    padding: 0rem 0.5rem; }
  .footer__link:hover {
    color: #55c57a;
    padding: 0rem 0.5rem;
    border-radius: 1.6rem;
    box-shadow: 0rem 1rem 2rem rgba(0, 0, 0, 0.4);
    transform: scale(1.1) translateY(-3px); }
  .footer__link:active {
    transform: scale(1.1) translateY(-1.5px);
    box-shadow: 0rem 0.5rem 1rem rgba(0, 0, 0, 0.4); }
  .footer__copyright {
    border-top: 1px solid #eee;
    padding-top: 2rem;
    width: 80%;
    float: right; }
    @media (max-width: 56.25em) {
      .footer__copyright {
        width: 100%;
        float: none; } }

.navigation__checkbox {
  display: none; }

.navigation__button {
  background-color: #fff;
  height: 7rem;
  width: 7rem;
  position: fixed;
  top: 6rem;
  right: 6rem;
  border-radius: 50%;
  z-index: 2000;
  box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.1);
  text-align: center;
  cursor: pointer;
  transition: all 0.1s; }
  @media (max-width: 56.25em) {
    .navigation__button {
      top: 4rem;
      right: 4rem; } }
  @media (max-width: 37.5em) {
    .navigation__button {
      /**
        @content - This is how we can pass a block of code into the mixin
      */
      top: 3rem;
      right: 3rem; } }
  .navigation__button:hover {
    transform: scale(1.1) translateY(-3px);
    box-shadow: 0 2rem 3rem rgba(0, 0, 0, 0.2); }
  .navigation__button:active {
    transform: scale(1) translateY(-1.5px);
    box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.1); }

.navigation__background {
  height: 6rem;
  width: 6rem;
  border-radius: 50%;
  position: fixed;
  right: 6.5rem;
  top: 6.5rem;
  background-image: radial-gradient(#7ed56f, #28b485);
  z-index: 1000;
  transition: all 0.8s cubic-bezier(0.85, 0, 0.15, 1); }
  @media (max-width: 56.25em) {
    .navigation__background {
      top: 4.5rem;
      right: 4.5rem; } }
  @media (max-width: 37.5em) {
    .navigation__background {
      /**
        @content - This is how we can pass a block of code into the mixin
      */
      top: 3.5rem;
      right: 3.5rem; } }

.navigation__nav {
  height: 100vh;
  width: 0;
  position: fixed;
  top: 0;
  right: 0;
  z-index: 1500;
  opacity: 0;
  visibility: hidden;
  transition: all 0.6s cubic-bezier(0.68, -0.6, 0.32, 1.6); }

.navigation__list {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  list-style: none;
  text-align: center;
  width: 100%; }

.navigation__item {
  margin: 2rem; }

.navigation__link {
  /**
        Adding a span element allows the developer to easily define the spacing between the elements 
    */ }
  .navigation__link:link, .navigation__link:visited {
    /**
            It is important to define how these elements should be displayed. Without this, a lot of the properties will not apply. Properties such as transform, padding all rely on what kind of display parameter is defined
        */
    display: inline-block;
    border-radius: 1.6rem;
    text-decoration: none;
    font-size: 3rem;
    font-weight: 300;
    padding: 1rem 2rem;
    color: #fff;
    text-transform: uppercase;
    background-image: linear-gradient(120deg, transparent 0%, transparent 50%, white 50%);
    /**
        To achieve the animation, we need to increase the background size. Say we set it to 220%, then the background will be stretched to outside the link. Therefore, it will be essentially just covered with the transparent section of the image. 

        background-size: Percentage => Stretches the image in the corresponding dimension to the specified percentage of the background positioning area.
      */
    background-size: 250%;
    transition: all 0.3s; }
  .navigation__link span {
    margin-right: 1.5rem; }
  .navigation__link:hover {
    /**
        https://developer.mozilla.org/en-US/docs/Web/CSS/background-position
        background-position: 100% => A value of 100% means that the right (or bottom) edge of the background image is aligned with the right (or bottom) edge of the container   
      */
    background-position: 100%;
    color: #28b485;
    border-radius: 1.6rem;
    transform: translateY(-1rem) scale(1.1);
    box-shadow: 0rem 1rem 2rem rgba(0, 0, 0, 0.2); }
  .navigation__link:active {
    transform: translateY(-0.5rem) scale(1.1);
    box-shadow: 0rem 0.5rem 1rem rgba(0, 0, 0, 0.1); }

.navigation__checkbox:checked ~ .navigation__background {
  transform: scale(100); }

.navigation__checkbox:checked ~ .navigation__nav {
  width: 100%;
  visibility: visible;
  opacity: 1; }

.navigation__icon {
  position: relative;
  margin-top: 3.5rem;
  transition: all 0.1s; }
  .navigation__icon, .navigation__icon::before, .navigation__icon::after {
    width: 3rem;
    height: 2px;
    background-color: #333;
    display: inline-block; }
  .navigation__icon::before, .navigation__icon::after {
    content: "";
    position: absolute;
    left: 0;
    transition: all 0.1s; }
  .navigation__icon::before {
    top: -0.8rem; }
  .navigation__icon::after {
    top: 0.8rem; }

.navigation__button:hover .navigation__icon::before {
  top: -1rem; }

.navigation__button:active .navigation__icon::before {
  top: -0.8rem; }

.navigation__button:hover .navigation__icon::after {
  top: 1rem; }

.navigation__button:active .navigation__icon::after {
  top: 0.8rem; }

.navigation__checkbox:checked + .navigation__button .navigation__icon {
  background-color: transparent; }

.navigation__checkbox:checked + .navigation__button .navigation__icon::before {
  top: 0;
  /**
        we want to rotate to flat and then back to 45 deg
    */
  transform: rotate(135deg); }

.navigation__checkbox:checked + .navigation__button .navigation__icon::after {
  top: 0;
  transform: rotate(-135deg); }

.navigation__button-href {
  z-index: 8000;
  position: absolute;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  background-color: transparent;
  border-radius: 50%; }

/**
    This file will contain the styles that are specific to the home page only
*/
.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }

.section-features {
  padding: 20rem 0;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/nat-4.jpg);
  /**
    We are only trying to skew the background

    This is why we use the & > * to select all the direct children of this element. We will then skew it back to look straight
  */
  transform: skewY(-7deg);
  margin-top: -10rem; }
  .section-features > * {
    transform: skewy(7deg); }

.section-tours {
  background-color: #f7f7f7;
  padding: 25rem 0 15rem 0;
  margin-top: -20vh; }

.section-stories {
  padding: 15rem 0;
  position: relative; }

.section-book {
  padding: 15rem 0;
  background-image: linear-gradient(to right bottom, #7ed56f, #28b485); }
